package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RBRACKET = 15;
		static public final short RCURLY = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short EQL = 21;
		static public final short COMMA = 22;
		static public final short PLUS = 23;
		static public final short TIMES = 24;
		static public final short DIV = 25;
		static public final short MOD = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short ELSE = 29;
		static public final short IMPORT = 30;
		static public final short PUBLIC = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLlbN5LKS$yomsDCUQeYs29eQY6oA628A20#rHCCqo2LIqHQfN38pTycbCkMSpkbqwZz" +
		"eiNspLSkoigmiMompBIhICbiqBVlscVikup3lpNiWlzISyvdlzldUvJjtxhs0UI#gaO$BK8" +
		"PoZC8bk1GJCGnpCGGNumBCnq9SY6v8GdVqmBau3#VZREKrqQlDcPDm1QhaGVI9cdcEApCQF" +
		"wsD$FGsyhDT$5jn9QPZ94PZ36fmDKPW2PPY6LBG0ONo1VfY078mA8ItmUPLe3O2hvFDEmi#" +
		"TFJanTWyLLjFNcmpJuvYCMezUN4sxpSimDqsBrnzfghwL2FWYWn7FAw9a34h9AT819CZP8n" +
		"jEKfvN7x5BRWgRCP5UbIXaKpFo63FI85dP9ndP89dP4QKrbppn2fhxScFI41kI6mbrc85l#" +
		"RjyEEsa6Wq#xgeZAxeWcj3lDTZ3kfm0sx4JIXnVKKtjpHAlBssgWvdaeYUI4Og#g4UlULBP" +
		"A0$rY2BLcUzckivaw5Ohgs1qgIrFFwtwr2CyQZ4vPHJC1FJC1lpv0dSZDLOXFMu0njPtxjm" +
		"9pQnZpIsdSv$8eEhAOkxGWu6yk$8vGhAKrymd$qKy7iMyYyOeRqzMOcsPWPtcN5daFbVuni" +
		"yAMAu$yHnL#Z0tQoOkraddY5#hgzoeYlt#aJkhcvUBvjd#RrvPJPlZ5fbNZp3vWLhwyNpsx" +
		"nWn8itgWKlnUPvroTSP3IA8cHKX8aXOePxb3xbYPJn$uouvnbSUpxw4a9Y8#dhhhm6TuJGT" +
		"H7PZetAyBFV7Y7UthpzzE7vsOydadiURcwqU7ljO7LY#HSPh8LL9ODw5yfaLiTQ8m6zcWtE" +
		"98axRT1AK7UFe5RCcr09wsSIblInfZx5wAphcgHa0djDu2fjMCMNyA7OHpHQDfyZn7s0KMh" +
		"PpG3CMVJj9tPHdqV4KF#7WMtKAvtSS21dEZ59zt4$zIgjRwPUJSnWUmSefz2tXxA2iaddpc" +
		"QiYN8cZLFQDoSeZUtQdklghuQnevfpZ3X9trJ2f2EPqgzvVQEDNOzp2xc3YGKwZy8i91Rg#" +
		"CumSouZ5cbzFZ7M5Pz8BDTZhAI#KljNjwAUItLUH#hBj3wP#Wez7clEkqFpZ1tarEasDcWV" +
		"lxzPxsXx8x64s4IiSVWRY7NDDfVE8KTzjX87YVNkFibhTBIHxiZf5csUOThQwz2FE#QLhzl" +
		"Cr3BWY0MqRvgh5XEy#c6iHkVK4YSuxcBw4YbBhFMavnBVsd4pfyvbBpwjcu4m$3YNdUAorv" +
		"xMSRYrusZ3UE$ny3$G$hRH0Ft8AJaXlrF#BN$9IRWU#LCQvLlvHWxA0VbQzYlVL#gzhmNlS" +
		"sAlRNr6V4fyGkoHZsItyD#L3#LTldSIsucjn8loWcoHv#KvULQUaQVbAVb0vU#IzvLyJrwN" +
		"L#HbUKbULVPcUPJln#GHULZP3wdtayHhiatUaRVbBTaXRyeRz7oiOZ#fzs6hNJaalyWH#Lb" +
		"vVY2#KzhtSjmUzp7vGqbhLwtYtJAUTvXO0ho5c0w0DoaVxrAnl4t5ytvb4E0POjZ8Ss08Jv" +
		"5c1DH90fuVCOJ1iyNaVT3mH3vvGubIyagPLy3Jge3dnp2YaBxX2Z6yHPeyzms5GRJJA2tqv" +
		"nWjMFU1NFhBASCXXx4SocADRDhPb2KEfBAFLChq21Z0lYeehREZY6qKKS#WpAIqa4Lz$Bzp" +
		"uM7c");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Decls RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [1] Imports = Imports IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN2,	// [3] Decls = Decls FuncDecl; returns 'FuncDecl' although none is marked
			RETURN2,	// [4] Decls = Decls FieldDecl; returns 'FieldDecl' although none is marked
			RETURN2,	// [5] Decls = Decls TypeDecl; returns 'TypeDecl' although none is marked
			Action.NONE,  	// [6] Decls = 
			RETURN9,	// [7] FuncDecl = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Stmt RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [8] FieldDecl = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [9] TypeDecl = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [10] Accessibility = PUBLIC
			Action.NONE,  	// [11] Accessibility = 
			Action.RETURN,	// [12] TypeName = PrimitiveType
			Action.RETURN,	// [13] TypeName = ArrayType
			Action.RETURN,	// [14] TypeName = ID
			Action.RETURN,	// [15] PrimitiveType = VOID
			Action.RETURN,	// [16] PrimitiveType = BOOLEAN
			Action.RETURN,	// [17] PrimitiveType = INT
			RETURN3,	// [18] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [19] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [20] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [21] ParamList = NonEmptyParamList
			Action.NONE,  	// [22] ParamList = 
			new Action() {	// [23] NonEmptyParamList = NonEmptyParamList COMMA Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [24] NonEmptyParamList = Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [25] Param = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [26] Stmt = LocalVarDecl
			Action.RETURN,	// [27] Stmt = BlockStmt
			Action.RETURN,	// [28] Stmt = IfStmt
			Action.RETURN,	// [29] Stmt = WhileStmt
			Action.RETURN,	// [30] Stmt = BreakStmt
			Action.RETURN,	// [31] Stmt = ReturnStmt
			Action.RETURN,	// [32] Stmt = ExprStmt
			RETURN3,	// [33] LocalVarDecl = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [34] BlockStmt = LCURLY Stmts RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [35] Stmts = Stmt Stmts; returns 'Stmts' although none is marked
			Action.NONE,  	// [36] Stmts = 
			RETURN7,	// [37] IfStmt = IF LPAREN Expr RPAREN Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [38] IfStmt = IF LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [39] WhileStmt = WHILE LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN2,	// [40] BreakStmt = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [41] ReturnStmt = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] ReturnStmt = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ExprStmt = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [44] Expr = Assignment
			Action.RETURN,	// [45] Expr = RHSExpr
			RETURN3,	// [46] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [47] LHSExpr = ID
			Action.RETURN,	// [48] LHSExpr = ArrayAccess
			RETURN4,	// [49] ArrayAccess = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [50] ArrayAccess = ArrayAccess LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [51] RHSExpr = ArithmeticExpr
			RETURN3,	// [52] RHSExpr = ArithmeticExpr ComparisonOperator ArithmeticExpr; returns 'ArithmeticExpr' although none is marked
			Action.RETURN,	// [53] ComparisonOperator = EQEQ
			Action.RETURN,	// [54] ComparisonOperator = NEQ
			Action.RETURN,	// [55] ComparisonOperator = LT
			Action.RETURN,	// [56] ComparisonOperator = LEQ
			Action.RETURN,	// [57] ComparisonOperator = GT
			Action.RETURN,	// [58] ComparisonOperator = GEQ
			new Action() {	// [59] ArithmeticExpr = ArithmeticExpr AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] ArithmeticExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [61] AdditiveOperator = PLUS
			Action.RETURN,	// [62] AdditiveOperator = MINUS
			new Action() {	// [63] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [64] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [65] MultiplicativeOperator = TIMES
			Action.RETURN,	// [66] MultiplicativeOperator = DIV
			Action.RETURN,	// [67] MultiplicativeOperator = MOD
			RETURN2,	// [68] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [69] Factor = PrimaryExpr
			Action.RETURN,	// [70] PrimaryExpr = LHSExpr
			Action.RETURN,	// [71] PrimaryExpr = FunctionCall
			Action.RETURN,	// [72] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [73] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [74] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [75] PrimaryExpr = Bool
			Action.RETURN,	// [76] PrimaryExpr = ParenthesisedExpr
			RETURN4,	// [77] FunctionCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [78] ExprList = NonEmptyExprList
			Action.NONE,  	// [79] ExprList = 
			RETURN3,	// [80] NonEmptyExprList = Expr COMMA NonEmptyExprList; returns 'NonEmptyExprList' although none is marked
			Action.RETURN,	// [81] NonEmptyExprList = Expr
			RETURN3,	// [82] ArrayExpr = LBRACKET NonEmptyExprList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [83] Bool = TRUE
			Action.RETURN,	// [84] Bool = FALSE
			RETURN3	// [85] ParenthesisedExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
