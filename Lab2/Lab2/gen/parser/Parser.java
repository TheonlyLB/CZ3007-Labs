package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short EQL = 21;
		static public final short COMMA = 22;
		static public final short PLUS = 23;
		static public final short TIMES = 24;
		static public final short DIV = 25;
		static public final short MOD = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short ELSE = 29;
		static public final short IMPORT = 30;
		static public final short PUBLIC = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLcbKLLKK$kvzI488g8aD3aJAe0626W8oWvg2bGMOvb1QY6Kvu9WJIEMKjbhziDN$rcg" +
		"U1pKRRB09osmmiSd21XibRR9stptlS7dSzoxFjrYkLU#jx#xfs$kUS##vPn$0t8PgPE4IbA" +
		"0COt0nnkDovE0cZCH5w8y5gCDPY4DVd8rpS2xEGp$q2ZcZJyWPvmVDI79a1EEdXCXFS$2NO" +
		"Z9ceWXZCGxJCGDvM86RiHBno9Lc#GuNO0ZIaU77MstpJFBkS#LvR5wODAERA#zCczST4OXq" +
		"vMssUMlLVDnuQsnUL0TUeESpLJsVQfGw8gDHZbcupY#IZojGYIhCxgJQX8xZaKTrpfKXvFo" +
		"2PRn$EAO5p1ciH#qVkT0rCjmrakqQgN2DNEOQkJf8DSTCSGRcY20QFP3f5xi5iTWahLY8EQ" +
		"Z1Sh#uqwxnyzHYBgx73PY76uDc5phUjJDU72JULTkxgXla61Rp$Qz3J$IcTKYlvaOq84Q#r" +
		"TO0962LrWVYLWn28eOY6QdyYWim32Cm2fTIcuXhC0dNOWhcosEensrOX0su2hS3MC8dkXuR" +
		"iOMvISnDuNSob2iebJj5Ecjay8qCPoNhhMMnNZRVOIw$Z3n#1V$5ZDFDDs1oJmlZJXRELTk" +
		"TwoMIUrSKLsuPOhXpzMGVwSrztycBitdzoAjmvHashmTvOrnv9JPld5g7Rhm1Diyx7pTUiG" +
		"lF$Va4YbWr2m94lFscl9Dgpl54w9n0rTnolFROJdF#dn7dJ6EeWnw3UwOp5irdDr1vmzZfO" +
		"rsUKhlTryyJptDA0Zlc8FQOODdECOSQxwhjNQs6ybkmlXg3yAxcOkgbwZnXMPP$WjQZUVhn" +
		"CEBXkIY2Nt4HFT4yqPdKOkdnmdgMLkrOtYyE1djKBFzz51VOkXRgjutOJUpKTXDWx24EM7O" +
		"R07CQVHyJ7rAVJNc8ieg1EoahTUwzrAjzyvnWV3vHg$axgC$I$YMiEPbo0Oszb3Ce3#lOCi" +
		"QEKjRHEA5z2xtIQDBs8iTzvZ7MgZajn4bYF$sHb76KlJGleRFnjjSpuidD91Rhl7eYXrYgu" +
		"yC2pBMOMAxr5SHuHtmIiKhdvrDVe$qDmSTZhjHvHwYlrhxfn3hjdqaq##VXRdBcQlucBSar" +
		"6trgRoQecXk9zJx#EuWDFhLgVVH6tgy$vLq1xhdFfqPocouY1ttqrc1pTjICwcWRXTe$MCi" +
		"ydrY5zbKwSgQurpTgTCvKuXZ7dMyDqokDutektKvzl4QTmwvlrysI07pd$18TzfPs7IsdEe" +
		"uGndjFO3zsTRqsjaB$v6$vGtwbF2b$oPzm$EHtTMsHh#HBEInVoEVocV9yggwVs3pkItBGj" +
		"WuG7n7SgUG3sI$loNPg##HjNjyYNY5U97RA3jakpyepyhGy9K$A4$AkojyhxoZP92$Byx9B" +
		"dfCNbFsGFCph8$AWFA3i#zNrSMAtl2HloXlokkoHr#HLUjvNiH$KzNkhhXoLd#Kd#L5vlY6" +
		"EAErh#SqUzmavhkG$l5Jnb1NE4rGO0PuAJ1#0fwO8dfl2U78AvrdA8C1UOjWOuOEHx19jA5" +
		"KT1UmZ7i9WXp5vHZHSaKNUA2AVF6lzPxDhPRERv12vz8rMyF1aQRBN6mePj9CeBIHpZ1QiC" +
		"q0c$MMKWP3EM3fbeKOQxJJA8XyayXw9b2cTO0ZlLKvPph4MgDESmSxjOUys55AfJ$mNNMzS" +
		"DW==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Decls RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [1] Imports = Imports IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN2,	// [3] Decls = Decls FuncDecl; returns 'FuncDecl' although none is marked
			RETURN2,	// [4] Decls = Decls FieldDecl; returns 'FieldDecl' although none is marked
			RETURN2,	// [5] Decls = Decls TypeDecl; returns 'TypeDecl' although none is marked
			Action.NONE,  	// [6] Decls = 
			RETURN9,	// [7] FuncDecl = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Stmts RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [8] FieldDecl = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [9] TypeDecl = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [10] Accessibility = PUBLIC
			Action.NONE,  	// [11] Accessibility = 
			Action.RETURN,	// [12] TypeName = PrimitiveType
			Action.RETURN,	// [13] TypeName = ArrayType
			Action.RETURN,	// [14] TypeName = ID
			Action.RETURN,	// [15] PrimitiveType = VOID
			Action.RETURN,	// [16] PrimitiveType = BOOLEAN
			Action.RETURN,	// [17] PrimitiveType = INT
			RETURN3,	// [18] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [19] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [20] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [21] ParamList = NonEmptyParamList
			Action.NONE,  	// [22] ParamList = 
			new Action() {	// [23] NonEmptyParamList = NonEmptyParamList COMMA Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [24] NonEmptyParamList = Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [25] Param = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [26] Stmt = LocalVarDecl
			Action.RETURN,	// [27] Stmt = BlockStmt
			Action.RETURN,	// [28] Stmt = IfStmt
			Action.RETURN,	// [29] Stmt = WhileStmt
			Action.RETURN,	// [30] Stmt = BreakStmt
			Action.RETURN,	// [31] Stmt = ReturnStmt
			Action.RETURN,	// [32] Stmt = ExprStmt
			RETURN3,	// [33] LocalVarDecl = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [34] BlockStmt = LCURLY Stmts RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [35] Stmts = Stmt Stmts; returns 'Stmts' although none is marked
			Action.NONE,  	// [36] Stmts = 
			RETURN7,	// [37] IfStmt = IF LPAREN Expr RPAREN Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [38] IfStmt = IF LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [39] WhileStmt = WHILE LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN2,	// [40] BreakStmt = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [41] ReturnStmt = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] ReturnStmt = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ExprStmt = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [44] Expr = Assignment
			Action.RETURN,	// [45] Expr = RHSExpr
			RETURN3,	// [46] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [47] LHSExpr = ID
			Action.RETURN,	// [48] LHSExpr = ArrayAccess
			RETURN4,	// [49] ArrayAccess = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [50] ArrayAccess = ArrayAccess LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [51] RHSExpr = ArithmeticExpr
			RETURN3,	// [52] RHSExpr = ArithmeticExpr ComparisonOperator ArithmeticExpr; returns 'ArithmeticExpr' although none is marked
			Action.RETURN,	// [53] ComparisonOperator = EQEQ
			Action.RETURN,	// [54] ComparisonOperator = NEQ
			Action.RETURN,	// [55] ComparisonOperator = LT
			Action.RETURN,	// [56] ComparisonOperator = LEQ
			Action.RETURN,	// [57] ComparisonOperator = GT
			Action.RETURN,	// [58] ComparisonOperator = GEQ
			new Action() {	// [59] ArithmeticExpr = ArithmeticExpr AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] ArithmeticExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [61] AdditiveOperator = PLUS
			Action.RETURN,	// [62] AdditiveOperator = MINUS
			new Action() {	// [63] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [64] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [65] MultiplicativeOperator = TIMES
			Action.RETURN,	// [66] MultiplicativeOperator = DIV
			Action.RETURN,	// [67] MultiplicativeOperator = MOD
			RETURN2,	// [68] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [69] Factor = PrimaryExpr
			Action.RETURN,	// [70] PrimaryExpr = LHSExpr
			Action.RETURN,	// [71] PrimaryExpr = FunctionCall
			Action.RETURN,	// [72] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [73] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [74] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [75] PrimaryExpr = Bool
			Action.RETURN,	// [76] PrimaryExpr = ParenthesisedExpr
			RETURN4,	// [77] FunctionCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [78] ExprList = NonEmptyExprList
			Action.NONE,  	// [79] ExprList = 
			RETURN3,	// [80] NonEmptyExprList = Expr COMMA NonEmptyExprList; returns 'NonEmptyExprList' although none is marked
			Action.RETURN,	// [81] NonEmptyExprList = Expr
			RETURN3,	// [82] ArrayExpr = LBRACKET NonEmptyExprList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [83] Bool = TRUE
			Action.RETURN,	// [84] Bool = FALSE
			RETURN3	// [85] ParenthesisedExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
