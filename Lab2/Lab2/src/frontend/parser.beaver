// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
//%goal Dummy;

Module = MODULE ID LCURLY Imports Decls RCURLY;

/* IMPORT ID SEMICOLON Imports? */
Imports = Imports IMPORT ID SEMICOLON
  | /* empty */
  ;

/* FnDecl Decls? */
Decls = Decls FuncDecl
  | Decls FieldDecl
  | Decls TypeDecl
  | /* empty */
  ;

FuncDecl = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Stmts RCURLY;

FieldDecl = Accessibility TypeName ID SEMICOLON;

TypeDecl = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

Accessibility = PUBLIC
  | /* empty */
  ;

TypeName = PrimitiveType
  | ArrayType
  | ID
  ;

PrimitiveType = VOID
  | BOOLEAN
  | INT
  ;

ArrayType = PrimitiveType LBRACKET RBRACKET
		  | ArrayType LBRACKET RBRACKET
		  | ID LBRACKET RBRACKET
		  ;

ParamList = NonEmptyParamList
  | /* empty */
  ;

/* avoids trailing commas */
/* Param COMMA NonEmptyParamList?*/
NonEmptyParamList = NonEmptyParamList COMMA Param
  | Param
  ;

Param = TypeName ID;

Stmt = LocalVarDecl 
          | BlockStmt
          | IfStmt
          | WhileStmt
          | BreakStmt
          | ReturnStmt
          | ExprStmt
          ;

LocalVarDecl = TypeName ID SEMICOLON ;

BlockStmt = LCURLY Stmts RCURLY ;

Stmts = Stmt Stmts
              |
              ;

IfStmt = IF LPAREN Expr RPAREN Stmt ELSE Stmt
       | IF LPAREN Expr RPAREN Stmt;

WhileStmt = WHILE LPAREN Expr RPAREN Stmt ;

BreakStmt = BREAK SEMICOLON ;

ReturnStmt = RETURN SEMICOLON
                | RETURN Expr SEMICOLON
                ;

ExprStmt = Expr SEMICOLON ;

Expr = Assignment
	 | RHSExpr
	 ;
	 
Assignment = LHSExpr EQL Expr ;

LHSExpr = ID
		| ArrayAccess
		;

ArrayAccess = ID LBRACKET Expr RBRACKET 
			| ArrayAccess LBRACKET Expr RBRACKET
			;
			
RHSExpr = ArithmeticExpr
		| ArithmeticExpr ComparisonOperator ArithmeticExpr
		;

ComparisonOperator = EQEQ
				   | NEQ
				   | LT
				   | LEQ
				   | GT
				   | GEQ
				   ;

ArithmeticExpr = ArithmeticExpr AdditiveOperator Term
			   | Term 
			   ;

AdditiveOperator = PLUS
				 | MINUS
				 ;

Term = Term MultiplicativeOperator Factor
	 | Factor
	 ;
	 
MultiplicativeOperator = TIMES
					  | DIV
					  | MOD
					  ;
					  
Factor = MINUS Factor
	   | PrimaryExpr
	   ;

PrimaryExpr = LHSExpr
			| FunctionCall
			| ArrayExpr
			| STRING_LITERAL
			| INT_LITERAL
			| Bool
			| ParenthesisedExpr
			;
			
FunctionCall = ID LPAREN ExprList RPAREN ;

ExprList = NonEmptyExprList
		 |
		 ;

NonEmptyExprList = Expr COMMA NonEmptyExprList
				 | Expr
				 ;
				 
ArrayExpr = LBRACKET NonEmptyExprList RBRACKET ;

Bool = TRUE
	 | FALSE
	 ;

ParenthesisedExpr = LPAREN Expr RPAREN ;			

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
/*Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
         PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; */
